# models.py
# SQLAlchemy 2.0 スタイル。PostgreSQLを前提に型・デフォルトを合わせています。
from __future__ import annotations

from datetime import datetime
from decimal import Decimal
from typing import List, Optional
from uuid import UUID

from sqlalchemy import (
    BigInteger,
    DECIMAL,
    ForeignKey,
    Text,
    func,
    text,
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
from sqlalchemy.dialects.postgresql import UUID as PG_UUID, TIMESTAMP as PG_TIMESTAMP


class Base(DeclarativeBase):
    pass


class Patient(Base):
    """
    patients テーブルに対応。
    - id は IDENTITY（自動採番）。PostgreSQL の GENERATED BY DEFAULT AS IDENTITY に相当。
    - sex は 'male','female','other','unknown' のいずれか（DB側でもCHECK制約）
    - created_at / updated_at は DB 側で now() が入る
    """
    __tablename__ = "patients"

    id: Mapped[int] = mapped_column(
        BigInteger, primary_key=True, autoincrement=True
    )
    name: Mapped[str] = mapped_column(Text, nullable=False)  # VARCHAR(50)でもOKだが Textで十分
    age: Mapped[int] = mapped_column(nullable=False)
    sex: Mapped[str] = mapped_column(Text, nullable=False)   # 'male' | 'female' | 'other' | 'unknown'

    created_at: Mapped[datetime] = mapped_column(
        PG_TIMESTAMP(timezone=True),
        server_default=func.now(),  # DEFAULT now()
        nullable=False,
    )
    updated_at: Mapped[datetime] = mapped_column(
        PG_TIMESTAMP(timezone=True),
        server_default=func.now(),
        nullable=False,
    )

    # 子（vital_logs）との1対多
    vital_logs: Mapped[List["VitalLog"]] = relationship(
        back_populates="patient",
        cascade="all, delete-orphan",   # 親からの削除で子も削除（DBのON DELETE CASCADEとも整合）
        passive_deletes=True,
    )


class VitalLog(Base):
    """
    vital_logs テーブルに対応。
    - id は UUID。DB側の DEFAULT gen_random_uuid() を尊重
    - patient_id は 親の patients.id へ FK (ON DELETE CASCADE)
    - body_temperature は NUMERIC(4,1) -> Python側は Decimal が無難
    - measured_at / created_at は DB側で now()
    """
    __tablename__ = "vital_logs"

    id: Mapped[UUID] = mapped_column(
        PG_UUID(as_uuid=True),
        primary_key=True,
        server_default=text("gen_random_uuid()"),  # pgcrypto拡張等が有効な前提
    )

    patient_id: Mapped[int] = mapped_column(
        ForeignKey("patients.id", ondelete="CASCADE"),
        nullable=False,
    )

    body_temperature: Mapped[Optional[Decimal]] = mapped_column(
        DECIMAL(4, 1), nullable=True
    )
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    created_at: Mapped[datetime] = mapped_column(
        PG_TIMESTAMP(timezone=True),
        server_default=func.now(),
        nullable=False,
    )
    measured_at: Mapped[datetime] = mapped_column(
        PG_TIMESTAMP(timezone=True),
        server_default=func.now(),
        nullable=False,
    )

    # 親（patients）への参照
    patient: Mapped[Patient] = relationship(back_populates="vital_logs")
