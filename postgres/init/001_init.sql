-- UUID関係のライブラリインポート
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 病院データベース
CREATE DATABASE hospital;
-- 患者テーブル
CREATE TABLE IF NOT EXISTS patients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    age INT NOT NULL,
    sex TEXT NOT NULL,-- male, female, other
    created_at  TIMESTAMPTZ           NOT NULL DEFAULT now(),
    updated_at  TIMESTAMPTZ           NOT NULL DEFAULT now(),
    -- 妥当性チェック
    CONSTRAINT chk_patients_age_nonneg CHECK (age>=0),
    CONSTRAINT chk_patients_sex_values CHECK (sex IN ('male','female','other','unknown'))
);

-- 変更時刻の自動更新
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();                                 -- ←更新される行のupdated_atを書き換え
    RETURN NEW;                                             -- 書き換えた行を確定
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_patients_updated_at ON patients; -- patientsテーブルに既にトリガ(自動実行する処理)がないか確認（あれば削除）
CREATE TRIGGER trg_patients_updated_at                      -- 新しいトリガーを作りますよ
BEFORE UPDATE ON patients                                   -- patientsに何か更新が加えられる前に
FOR EACH ROW EXECUTE FUNCTION set_updated_at();             -- 各行に対してset_updated_at関数を実行してくださいね

-- 受診対応テーブル
CREATE TABLE IF NOT EXISTS vital_logs(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id BIGINT NOT NULL,
    body_temperature NUMERIC(4,1),
    description VARCHAR(200),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    measured_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    -- 外部キーの結びつけ。患者が消えたらログも消えるよう、CASCADE
    CONSTRAINT fk_vital_logs_patient
        FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,
    -- 変な体温はRejectする制約
    CONSTRAINT chk_temp_range CHECK (
        body_temperature IS NULL OR body_temperature BETWEEN 30.0 AND 45.0
    )
);

-- 参照頻度順にインデックス
CREATE INDEX IF NOT EXISTS idx_vital_logs_patient_id ON vital_logs(patient_id);
CREATE INDEX IF NOT EXISTS idx_vital_logs_measured_at ON vital_logs(measured_at);

-- サンプル
INSERT INTO patients (name, age, sex) VALUES ('Alice', 25, 'female') RETURNING id;

-- 返ってきたidを使って
INSERT INTO vital_logs (patient_id, body_temperature, description)
VALUES (1, 36.8, 'evening check');







-- 名簿データベース
-- CREATE DATABASE sample_db;
-- テーブルの作成
-- CREATE TABLE users (
--     id SERIAL PRIMARY KEY,
--     name VARCHAR(50),
--     age INT
-- );
-- データの操作
-- INSERT INTO users (id, name, age) VALUES (1, 'Alice', 25);